


//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r12016@cad40
//  Generated date: Tue Apr  9 16:23:43 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm (
  clk, rst, arst_n, run_wen, fsm_output, HCOL_C_0_tr0, HROW_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  input run_wen;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input HCOL_C_0_tr0;
  input HROW_C_0_tr0;


  // FSM State Type Declaration for EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_1
  parameter
    main_C_0 = 2'd0,
    HCOL_C_0 = 2'd1,
    HROW_C_0 = 2'd2,
    main_C_1 = 2'd3;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_1
    case (state_var)
      HCOL_C_0 : begin
        fsm_output = 4'b0010;
        if ( HCOL_C_0_tr0 ) begin
          state_var_NS = HROW_C_0;
        end
        else begin
          state_var_NS = HCOL_C_0;
        end
      end
      HROW_C_0 : begin
        fsm_output = 4'b0100;
        if ( HROW_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = HCOL_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 4'b1000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 4'b0001;
        state_var_NS = HCOL_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_staller
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_staller (
  run_wen, pix_chan1_rsci_wen_comp, pix_chan2_rsci_wen_comp, dx_chan_rsci_wen_comp
);
  output run_wen;
  input pix_chan1_rsci_wen_comp;
  input pix_chan2_rsci_wen_comp;
  input dx_chan_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = pix_chan1_rsci_wen_comp & pix_chan2_rsci_wen_comp & dx_chan_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_dp (
  clk, rst, arst_n, dx_chan_rsci_oswt, dx_chan_rsci_wen_comp, dx_chan_rsci_biwt,
      dx_chan_rsci_bdwt, dx_chan_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input dx_chan_rsci_oswt;
  output dx_chan_rsci_wen_comp;
  input dx_chan_rsci_biwt;
  input dx_chan_rsci_bdwt;
  output dx_chan_rsci_bcwt;
  reg dx_chan_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dx_chan_rsci_wen_comp = (~ dx_chan_rsci_oswt) | dx_chan_rsci_biwt | dx_chan_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dx_chan_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dx_chan_rsci_bcwt <= 1'b0;
    end
    else begin
      dx_chan_rsci_bcwt <= ~((~(dx_chan_rsci_bcwt | dx_chan_rsci_biwt)) | dx_chan_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_ctrl (
  run_wen, dx_chan_rsci_oswt, dx_chan_rsci_biwt, dx_chan_rsci_bdwt, dx_chan_rsci_bcwt,
      dx_chan_rsci_irdy, dx_chan_rsci_ivld_run_sct
);
  input run_wen;
  input dx_chan_rsci_oswt;
  output dx_chan_rsci_biwt;
  output dx_chan_rsci_bdwt;
  input dx_chan_rsci_bcwt;
  input dx_chan_rsci_irdy;
  output dx_chan_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire dx_chan_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dx_chan_rsci_bdwt = dx_chan_rsci_oswt & run_wen;
  assign dx_chan_rsci_biwt = dx_chan_rsci_ogwt & dx_chan_rsci_irdy;
  assign dx_chan_rsci_ogwt = dx_chan_rsci_oswt & (~ dx_chan_rsci_bcwt);
  assign dx_chan_rsci_ivld_run_sct = dx_chan_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_dp (
  clk, rst, arst_n, pix_chan2_rsci_oswt, pix_chan2_rsci_wen_comp, pix_chan2_rsci_biwt,
      pix_chan2_rsci_bdwt, pix_chan2_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input pix_chan2_rsci_oswt;
  output pix_chan2_rsci_wen_comp;
  input pix_chan2_rsci_biwt;
  input pix_chan2_rsci_bdwt;
  output pix_chan2_rsci_bcwt;
  reg pix_chan2_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign pix_chan2_rsci_wen_comp = (~ pix_chan2_rsci_oswt) | pix_chan2_rsci_biwt
      | pix_chan2_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      pix_chan2_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      pix_chan2_rsci_bcwt <= 1'b0;
    end
    else begin
      pix_chan2_rsci_bcwt <= ~((~(pix_chan2_rsci_bcwt | pix_chan2_rsci_biwt)) | pix_chan2_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_ctrl (
  run_wen, pix_chan2_rsci_oswt, pix_chan2_rsci_biwt, pix_chan2_rsci_bdwt, pix_chan2_rsci_bcwt,
      pix_chan2_rsci_irdy, pix_chan2_rsci_ivld_run_sct
);
  input run_wen;
  input pix_chan2_rsci_oswt;
  output pix_chan2_rsci_biwt;
  output pix_chan2_rsci_bdwt;
  input pix_chan2_rsci_bcwt;
  input pix_chan2_rsci_irdy;
  output pix_chan2_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire pix_chan2_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign pix_chan2_rsci_bdwt = pix_chan2_rsci_oswt & run_wen;
  assign pix_chan2_rsci_biwt = pix_chan2_rsci_ogwt & pix_chan2_rsci_irdy;
  assign pix_chan2_rsci_ogwt = pix_chan2_rsci_oswt & (~ pix_chan2_rsci_bcwt);
  assign pix_chan2_rsci_ivld_run_sct = pix_chan2_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_dp (
  clk, rst, arst_n, pix_chan1_rsci_oswt, pix_chan1_rsci_wen_comp, pix_chan1_rsci_idat_mxwt,
      pix_chan1_rsci_biwt, pix_chan1_rsci_bdwt, pix_chan1_rsci_bcwt, pix_chan1_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  input pix_chan1_rsci_oswt;
  output pix_chan1_rsci_wen_comp;
  output [31:0] pix_chan1_rsci_idat_mxwt;
  input pix_chan1_rsci_biwt;
  input pix_chan1_rsci_bdwt;
  output pix_chan1_rsci_bcwt;
  reg pix_chan1_rsci_bcwt;
  input [33:0] pix_chan1_rsci_idat;


  // Interconnect Declarations
  reg [31:0] pix_chan1_rsci_idat_bfwt_31_0;


  // Interconnect Declarations for Component Instantiations 
  assign pix_chan1_rsci_wen_comp = (~ pix_chan1_rsci_oswt) | pix_chan1_rsci_biwt
      | pix_chan1_rsci_bcwt;
  assign pix_chan1_rsci_idat_mxwt = MUX_v_32_2_2((pix_chan1_rsci_idat[31:0]), pix_chan1_rsci_idat_bfwt_31_0,
      pix_chan1_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      pix_chan1_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      pix_chan1_rsci_bcwt <= 1'b0;
    end
    else begin
      pix_chan1_rsci_bcwt <= ~((~(pix_chan1_rsci_bcwt | pix_chan1_rsci_biwt)) | pix_chan1_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( pix_chan1_rsci_biwt ) begin
      pix_chan1_rsci_idat_bfwt_31_0 <= pix_chan1_rsci_idat[31:0];
    end
  end

  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_ctrl (
  run_wen, pix_chan1_rsci_oswt, pix_chan1_rsci_biwt, pix_chan1_rsci_bdwt, pix_chan1_rsci_bcwt,
      pix_chan1_rsci_irdy_run_sct, pix_chan1_rsci_ivld
);
  input run_wen;
  input pix_chan1_rsci_oswt;
  output pix_chan1_rsci_biwt;
  output pix_chan1_rsci_bdwt;
  input pix_chan1_rsci_bcwt;
  output pix_chan1_rsci_irdy_run_sct;
  input pix_chan1_rsci_ivld;


  // Interconnect Declarations
  wire pix_chan1_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign pix_chan1_rsci_bdwt = pix_chan1_rsci_oswt & run_wen;
  assign pix_chan1_rsci_biwt = pix_chan1_rsci_ogwt & pix_chan1_rsci_ivld;
  assign pix_chan1_rsci_ogwt = pix_chan1_rsci_oswt & (~ pix_chan1_rsci_bcwt);
  assign pix_chan1_rsci_irdy_run_sct = pix_chan1_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci (
  clk, rst, arst_n, dx_chan_rsc_dat, dx_chan_rsc_vld, dx_chan_rsc_rdy, run_wen, dx_chan_rsci_oswt,
      dx_chan_rsci_wen_comp, dx_chan_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [35:0] dx_chan_rsc_dat;
  output dx_chan_rsc_vld;
  input dx_chan_rsc_rdy;
  input run_wen;
  input dx_chan_rsci_oswt;
  output dx_chan_rsci_wen_comp;
  input [35:0] dx_chan_rsci_idat;


  // Interconnect Declarations
  wire dx_chan_rsci_biwt;
  wire dx_chan_rsci_bdwt;
  wire dx_chan_rsci_bcwt;
  wire dx_chan_rsci_irdy;
  wire dx_chan_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd5),
  .width(32'sd36)) dx_chan_rsci (
      .irdy(dx_chan_rsci_irdy),
      .ivld(dx_chan_rsci_ivld_run_sct),
      .idat(dx_chan_rsci_idat),
      .rdy(dx_chan_rsc_rdy),
      .vld(dx_chan_rsc_vld),
      .dat(dx_chan_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_ctrl EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dx_chan_rsci_oswt(dx_chan_rsci_oswt),
      .dx_chan_rsci_biwt(dx_chan_rsci_biwt),
      .dx_chan_rsci_bdwt(dx_chan_rsci_bdwt),
      .dx_chan_rsci_bcwt(dx_chan_rsci_bcwt),
      .dx_chan_rsci_irdy(dx_chan_rsci_irdy),
      .dx_chan_rsci_ivld_run_sct(dx_chan_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_dp EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_dx_chan_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_chan_rsci_oswt(dx_chan_rsci_oswt),
      .dx_chan_rsci_wen_comp(dx_chan_rsci_wen_comp),
      .dx_chan_rsci_biwt(dx_chan_rsci_biwt),
      .dx_chan_rsci_bdwt(dx_chan_rsci_bdwt),
      .dx_chan_rsci_bcwt(dx_chan_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci (
  clk, rst, arst_n, pix_chan2_rsc_dat, pix_chan2_rsc_vld, pix_chan2_rsc_rdy, run_wen,
      pix_chan2_rsci_oswt, pix_chan2_rsci_wen_comp, pix_chan2_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [33:0] pix_chan2_rsc_dat;
  output pix_chan2_rsc_vld;
  input pix_chan2_rsc_rdy;
  input run_wen;
  input pix_chan2_rsci_oswt;
  output pix_chan2_rsci_wen_comp;
  input [33:0] pix_chan2_rsci_idat;


  // Interconnect Declarations
  wire pix_chan2_rsci_biwt;
  wire pix_chan2_rsci_bdwt;
  wire pix_chan2_rsci_bcwt;
  wire pix_chan2_rsci_irdy;
  wire pix_chan2_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd4),
  .width(32'sd34)) pix_chan2_rsci (
      .irdy(pix_chan2_rsci_irdy),
      .ivld(pix_chan2_rsci_ivld_run_sct),
      .idat(pix_chan2_rsci_idat),
      .rdy(pix_chan2_rsc_rdy),
      .vld(pix_chan2_rsc_vld),
      .dat(pix_chan2_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_ctrl EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .pix_chan2_rsci_oswt(pix_chan2_rsci_oswt),
      .pix_chan2_rsci_biwt(pix_chan2_rsci_biwt),
      .pix_chan2_rsci_bdwt(pix_chan2_rsci_bdwt),
      .pix_chan2_rsci_bcwt(pix_chan2_rsci_bcwt),
      .pix_chan2_rsci_irdy(pix_chan2_rsci_irdy),
      .pix_chan2_rsci_ivld_run_sct(pix_chan2_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_dp EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_pix_chan2_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .pix_chan2_rsci_oswt(pix_chan2_rsci_oswt),
      .pix_chan2_rsci_wen_comp(pix_chan2_rsci_wen_comp),
      .pix_chan2_rsci_biwt(pix_chan2_rsci_biwt),
      .pix_chan2_rsci_bdwt(pix_chan2_rsci_bdwt),
      .pix_chan2_rsci_bcwt(pix_chan2_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci (
  clk, rst, arst_n, pix_chan1_rsc_dat, pix_chan1_rsc_vld, pix_chan1_rsc_rdy, run_wen,
      pix_chan1_rsci_oswt, pix_chan1_rsci_wen_comp, pix_chan1_rsci_idat_mxwt
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] pix_chan1_rsc_dat;
  input pix_chan1_rsc_vld;
  output pix_chan1_rsc_rdy;
  input run_wen;
  input pix_chan1_rsci_oswt;
  output pix_chan1_rsci_wen_comp;
  output [31:0] pix_chan1_rsci_idat_mxwt;


  // Interconnect Declarations
  wire pix_chan1_rsci_biwt;
  wire pix_chan1_rsci_bdwt;
  wire pix_chan1_rsci_bcwt;
  wire pix_chan1_rsci_irdy_run_sct;
  wire pix_chan1_rsci_ivld;
  wire [33:0] pix_chan1_rsci_idat;
  wire [31:0] pix_chan1_rsci_idat_mxwt_pconst;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd1),
  .width(32'sd34)) pix_chan1_rsci (
      .rdy(pix_chan1_rsc_rdy),
      .vld(pix_chan1_rsc_vld),
      .dat(pix_chan1_rsc_dat),
      .irdy(pix_chan1_rsci_irdy_run_sct),
      .ivld(pix_chan1_rsci_ivld),
      .idat(pix_chan1_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_ctrl EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .pix_chan1_rsci_oswt(pix_chan1_rsci_oswt),
      .pix_chan1_rsci_biwt(pix_chan1_rsci_biwt),
      .pix_chan1_rsci_bdwt(pix_chan1_rsci_bdwt),
      .pix_chan1_rsci_bcwt(pix_chan1_rsci_bcwt),
      .pix_chan1_rsci_irdy_run_sct(pix_chan1_rsci_irdy_run_sct),
      .pix_chan1_rsci_ivld(pix_chan1_rsci_ivld)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_dp EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_pix_chan1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .pix_chan1_rsci_oswt(pix_chan1_rsci_oswt),
      .pix_chan1_rsci_wen_comp(pix_chan1_rsci_wen_comp),
      .pix_chan1_rsci_idat_mxwt(pix_chan1_rsci_idat_mxwt_pconst),
      .pix_chan1_rsci_biwt(pix_chan1_rsci_biwt),
      .pix_chan1_rsci_bdwt(pix_chan1_rsci_bdwt),
      .pix_chan1_rsci_bcwt(pix_chan1_rsci_bcwt),
      .pix_chan1_rsci_idat(pix_chan1_rsci_idat)
    );
  assign pix_chan1_rsci_idat_mxwt = pix_chan1_rsci_idat_mxwt_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run (
  clk, rst, arst_n, pix_chan1_rsc_dat, pix_chan1_rsc_vld, pix_chan1_rsc_rdy, widthIn,
      heightIn, pix_chan2_rsc_dat, pix_chan2_rsc_vld, pix_chan2_rsc_rdy, dx_chan_rsc_dat,
      dx_chan_rsc_vld, dx_chan_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] pix_chan1_rsc_dat;
  input pix_chan1_rsc_vld;
  output pix_chan1_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [33:0] pix_chan2_rsc_dat;
  output pix_chan2_rsc_vld;
  input pix_chan2_rsc_rdy;
  output [35:0] dx_chan_rsc_dat;
  output dx_chan_rsc_vld;
  input dx_chan_rsc_rdy;


  // Interconnect Declarations
  wire run_wen;
  wire pix_chan1_rsci_wen_comp;
  wire [31:0] pix_chan1_rsci_idat_mxwt;
  wire pix_chan2_rsci_wen_comp;
  wire dx_chan_rsci_wen_comp;
  reg pix_chan2_rsci_idat_33;
  reg pix_chan2_rsci_idat_32;
  reg [23:0] pix_chan2_rsci_idat_31_8;
  reg [7:0] pix_chan2_rsci_idat_7_0;
  reg [8:0] dx_chan_rsci_idat_35_27;
  wire [9:0] nl_dx_chan_rsci_idat_35_27;
  reg [8:0] dx_chan_rsci_idat_26_18;
  reg [8:0] dx_chan_rsci_idat_17_9;
  reg [8:0] dx_chan_rsci_idat_8_0;
  wire [3:0] fsm_output;
  wire HROW_equal_tmp;
  wire [8:0] operator_11_false_acc_tmp;
  wire [9:0] nl_operator_11_false_acc_tmp;
  wire HCOL_HCOL_if_2_and_tmp;
  reg HCOL_stage_0_2;
  reg HCOL_stage_0_1;
  reg [8:0] HCOL_x_10_2_sva;
  reg [8:0] HCOL_asn_2_itm_1;
  reg HCOL_if_slc_operator_11_false_acc_9_svs_1;
  wire HCOL_if_3_and_cse;
  reg reg_pix_chan1_rsci_oswt_cse;
  reg reg_pix_chan2_rsci_oswt_cse;
  wire [8:0] HCOL_x_mux_2_cse;
  wire nand_cse;
  wire HCOL_if_3_aelse_HCOL_if_3_aelse_and_cse;
  reg [9:0] HROW_y_sva;
  reg [7:0] pix0_7_0_lpi_3;
  reg [23:0] pix0_31_8_lpi_3;
  reg [7:0] pix_buf0_31_24_lpi_3;
  reg HCOL_if_3_HCOL_if_3_and_itm_1;
  reg [8:0] operator_8_false_8_acc_1_itm_1;
  wire [9:0] nl_operator_8_false_8_acc_1_itm_1;
  reg [8:0] operator_8_false_5_acc_1_itm_1;
  wire [9:0] nl_operator_8_false_5_acc_1_itm_1;
  reg [8:0] operator_8_false_2_acc_1_itm_1;
  wire [9:0] nl_operator_8_false_2_acc_1_itm_1;
  wire [7:0] pix0_7_0_lpi_3_dfm_1_mx1w1;
  wire operator_11_false_operator_11_false_and_cse_sva_1;
  wire [7:0] pix0_31_8_lpi_3_mx1_7_0;
  wire [15:0] pix0_31_8_lpi_3_mx2_23_8;
  wire operator_8_false_2_and_cse;
  wire HROW_y_or_cse;
  wire HCOL_if_2_equal_tmp;
  wire [23:0] pix0_mux_8_cse;
  wire operator_11_false_acc_itm_9_1;

  wire[9:0] HROW_acc_nl;
  wire[10:0] nl_HROW_acc_nl;
  wire HROW_y_not_1_nl;
  wire not_nl;
  wire[23:0] pix0_mux_nl;
  wire and_69_nl;
  wire pix0_not_2_nl;
  wire mux_nl;
  wire or_4_nl;
  wire nor_nl;
  wire[7:0] HCOL_mux_3_nl;
  wire[7:0] pix0_mux_4_nl;
  wire pix0_nor_1_nl;
  wire HCOL_HCOL_nor_nl;
  wire HCOL_and_1_nl;
  wire[9:0] operator_11_false_acc_nl;
  wire[10:0] nl_operator_11_false_acc_nl;
  wire[9:0] operator_10_false_acc_1_nl;
  wire[10:0] nl_operator_10_false_acc_1_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_inst_pix_chan2_rsci_idat;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_inst_pix_chan2_rsci_idat
      = {pix_chan2_rsci_idat_33 , pix_chan2_rsci_idat_32 , pix_chan2_rsci_idat_31_8
      , pix_chan2_rsci_idat_7_0};
  wire [35:0] nl_EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_inst_dx_chan_rsci_idat;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_inst_dx_chan_rsci_idat
      = {dx_chan_rsci_idat_35_27 , dx_chan_rsci_idat_26_18 , dx_chan_rsci_idat_17_9
      , dx_chan_rsci_idat_8_0};
  wire  nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HCOL_C_0_tr0;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HCOL_C_0_tr0 = ~(HCOL_stage_0_1
      | HCOL_stage_0_2);
  EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan1_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .pix_chan1_rsc_dat(pix_chan1_rsc_dat),
      .pix_chan1_rsc_vld(pix_chan1_rsc_vld),
      .pix_chan1_rsc_rdy(pix_chan1_rsc_rdy),
      .run_wen(run_wen),
      .pix_chan1_rsci_oswt(reg_pix_chan1_rsci_oswt_cse),
      .pix_chan1_rsci_wen_comp(pix_chan1_rsci_wen_comp),
      .pix_chan1_rsci_idat_mxwt(pix_chan1_rsci_idat_mxwt)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .pix_chan2_rsc_dat(pix_chan2_rsc_dat),
      .pix_chan2_rsc_vld(pix_chan2_rsc_vld),
      .pix_chan2_rsc_rdy(pix_chan2_rsc_rdy),
      .run_wen(run_wen),
      .pix_chan2_rsci_oswt(reg_pix_chan2_rsci_oswt_cse),
      .pix_chan2_rsci_wen_comp(pix_chan2_rsci_wen_comp),
      .pix_chan2_rsci_idat(nl_EdgeDetect_IP_EdgeDetect_HorDer_run_pix_chan2_rsci_inst_pix_chan2_rsci_idat[33:0])
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_chan_rsc_dat(dx_chan_rsc_dat),
      .dx_chan_rsc_vld(dx_chan_rsc_vld),
      .dx_chan_rsc_rdy(dx_chan_rsc_rdy),
      .run_wen(run_wen),
      .dx_chan_rsci_oswt(reg_pix_chan2_rsci_oswt_cse),
      .dx_chan_rsci_wen_comp(dx_chan_rsci_wen_comp),
      .dx_chan_rsci_idat(nl_EdgeDetect_IP_EdgeDetect_HorDer_run_dx_chan_rsci_inst_dx_chan_rsci_idat[35:0])
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_staller EdgeDetect_IP_EdgeDetect_HorDer_run_staller_inst
      (
      .run_wen(run_wen),
      .pix_chan1_rsci_wen_comp(pix_chan1_rsci_wen_comp),
      .pix_chan2_rsci_wen_comp(pix_chan2_rsci_wen_comp),
      .dx_chan_rsci_wen_comp(dx_chan_rsci_wen_comp)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .HCOL_C_0_tr0(nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HCOL_C_0_tr0),
      .HROW_C_0_tr0(HROW_equal_tmp)
    );
  assign HCOL_if_3_and_cse = run_wen & (fsm_output[1]) & (~((HCOL_asn_2_itm_1==9'b000000000)))
      & HCOL_stage_0_2;
  assign HROW_y_or_cse = (fsm_output[0]) | (fsm_output[2]);
  assign pix0_mux_8_cse = MUX_v_24_2_2((pix_chan1_rsci_idat_mxwt[31:8]), pix0_31_8_lpi_3,
      HCOL_if_slc_operator_11_false_acc_9_svs_1);
  assign or_4_nl = (HCOL_x_10_2_sva!=9'b000000000);
  assign nor_nl = ~(HCOL_HCOL_if_2_and_tmp | (~((operator_11_false_acc_tmp!=9'b000000000))));
  assign mux_nl = MUX_s_1_2_2(or_4_nl, nor_nl, HCOL_stage_0_2);
  assign operator_8_false_2_and_cse = run_wen & mux_nl & HCOL_stage_0_1;
  assign HCOL_x_mux_2_cse = MUX_v_9_2_2(HCOL_x_10_2_sva, operator_11_false_acc_tmp,
      HCOL_stage_0_2);
  assign nl_operator_11_false_acc_tmp = HCOL_x_10_2_sva + 9'b000000001;
  assign operator_11_false_acc_tmp = nl_operator_11_false_acc_tmp[8:0];
  assign HCOL_if_3_aelse_HCOL_if_3_aelse_and_cse = HCOL_stage_0_1 & nand_cse;
  assign pix0_31_8_lpi_3_mx1_7_0 = MUX_v_8_2_2((pix0_31_8_lpi_3[7:0]), (pix0_mux_8_cse[7:0]),
      HCOL_stage_0_2);
  assign pix0_31_8_lpi_3_mx2_23_8 = MUX_v_16_2_2((pix0_31_8_lpi_3[23:8]), (pix0_mux_8_cse[23:8]),
      HCOL_stage_0_2);
  assign HCOL_HCOL_nor_nl = ~(HCOL_if_slc_operator_11_false_acc_9_svs_1 | HCOL_HCOL_if_2_and_tmp);
  assign HCOL_and_1_nl = HCOL_if_slc_operator_11_false_acc_9_svs_1 & (~ HCOL_HCOL_if_2_and_tmp);
  assign pix0_7_0_lpi_3_dfm_1_mx1w1 = MUX1HOT_v_8_3_2((pix_chan1_rsci_idat_mxwt[7:0]),
      pix0_7_0_lpi_3, (pix0_31_8_lpi_3[15:8]), {HCOL_HCOL_nor_nl , HCOL_and_1_nl
      , HCOL_HCOL_if_2_and_tmp});
  assign nl_operator_11_false_acc_nl = ({1'b1 , (widthIn[10:2])}) + conv_u2u_9_10(~
      HCOL_x_mux_2_cse);
  assign operator_11_false_acc_nl = nl_operator_11_false_acc_nl[9:0];
  assign operator_11_false_acc_itm_9_1 = readslicef_10_1_9(operator_11_false_acc_nl);
  assign nl_operator_10_false_acc_1_nl = heightIn + 10'b1111111111;
  assign operator_10_false_acc_1_nl = nl_operator_10_false_acc_1_nl[9:0];
  assign HROW_equal_tmp = HROW_y_sva == operator_10_false_acc_1_nl;
  assign HCOL_if_2_equal_tmp = HCOL_x_10_2_sva == (widthIn[10:2]);
  assign HCOL_HCOL_if_2_and_tmp = HCOL_if_2_equal_tmp & (widthIn[1:0]==2'b00);
  assign operator_11_false_operator_11_false_and_cse_sva_1 = (HCOL_x_mux_2_cse==9'b000000001);
  assign nand_cse = ~(HCOL_HCOL_if_2_and_tmp & HCOL_stage_0_2);
  always @(posedge clk) begin
    if ( HCOL_if_3_and_cse ) begin
      dx_chan_rsci_idat_35_27 <= nl_dx_chan_rsci_idat_35_27[8:0];
      dx_chan_rsci_idat_8_0 <= operator_8_false_2_acc_1_itm_1;
      dx_chan_rsci_idat_26_18 <= operator_8_false_8_acc_1_itm_1;
      dx_chan_rsci_idat_17_9 <= operator_8_false_5_acc_1_itm_1;
      pix_chan2_rsci_idat_33 <= HROW_equal_tmp & HCOL_HCOL_if_2_and_tmp;
      pix_chan2_rsci_idat_7_0 <= pix0_7_0_lpi_3;
      pix_chan2_rsci_idat_32 <= HCOL_if_3_HCOL_if_3_and_itm_1;
      pix_chan2_rsci_idat_31_8 <= pix0_31_8_lpi_3;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & HROW_y_or_cse ) begin
      HROW_y_sva <= MUX_v_10_2_2(10'b0000000000, HROW_acc_nl, HROW_y_not_1_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_x_10_2_sva <= 9'b000000000;
    end
    else if ( rst ) begin
      HCOL_x_10_2_sva <= 9'b000000000;
    end
    else if ( (HCOL_stage_0_2 | (fsm_output[2]) | (fsm_output[0])) & run_wen ) begin
      HCOL_x_10_2_sva <= MUX_v_9_2_2(9'b000000000, HCOL_x_mux_2_cse, not_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_stage_0_1 <= 1'b0;
      HCOL_asn_2_itm_1 <= 9'b000000000;
      HCOL_stage_0_2 <= 1'b0;
      reg_pix_chan1_rsci_oswt_cse <= 1'b0;
      reg_pix_chan2_rsci_oswt_cse <= 1'b0;
    end
    else if ( rst ) begin
      HCOL_stage_0_1 <= 1'b0;
      HCOL_asn_2_itm_1 <= 9'b000000000;
      HCOL_stage_0_2 <= 1'b0;
      reg_pix_chan1_rsci_oswt_cse <= 1'b0;
      reg_pix_chan2_rsci_oswt_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      HCOL_stage_0_1 <= HCOL_if_3_aelse_HCOL_if_3_aelse_and_cse | HROW_y_or_cse;
      HCOL_asn_2_itm_1 <= HCOL_x_mux_2_cse;
      HCOL_stage_0_2 <= HCOL_if_3_aelse_HCOL_if_3_aelse_and_cse & (~ HROW_y_or_cse);
      reg_pix_chan1_rsci_oswt_cse <= nand_cse & HCOL_stage_0_1 & (~ operator_11_false_acc_itm_9_1)
          & (fsm_output[1]);
      reg_pix_chan2_rsci_oswt_cse <= ((HCOL_asn_2_itm_1!=9'b000000000)) & HCOL_stage_0_2
          & (fsm_output[1]);
    end
  end
  always @(posedge clk) begin
    if ( ((HCOL_stage_0_2 & (fsm_output[1]) & (~ HCOL_if_slc_operator_11_false_acc_9_svs_1))
        | (fsm_output[0])) & run_wen ) begin
      pix0_31_8_lpi_3 <= MUX_v_24_2_2(24'b000000000000000000000000, pix0_mux_nl,
          pix0_not_2_nl);
    end
  end
  always @(posedge clk) begin
    if ( operator_8_false_2_and_cse ) begin
      operator_8_false_2_acc_1_itm_1 <= nl_operator_8_false_2_acc_1_itm_1[8:0];
      operator_8_false_8_acc_1_itm_1 <= nl_operator_8_false_8_acc_1_itm_1[8:0];
      operator_8_false_5_acc_1_itm_1 <= nl_operator_8_false_5_acc_1_itm_1[8:0];
      HCOL_if_3_HCOL_if_3_and_itm_1 <= (HROW_y_sva==10'b0000000000) & operator_11_false_operator_11_false_and_cse_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( (((~((~(HCOL_if_2_equal_tmp & (widthIn[1:0]==2'b00))) & HCOL_if_slc_operator_11_false_acc_9_svs_1))
        & (~ (fsm_output[2])) & HCOL_stage_0_2) | (fsm_output[0]) | (fsm_output[3]))
        & run_wen ) begin
      pix0_7_0_lpi_3 <= MUX_v_8_2_2(8'b00000000, pix0_7_0_lpi_3_dfm_1_mx1w1, pix0_nor_1_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_if_slc_operator_11_false_acc_9_svs_1 <= 1'b0;
    end
    else if ( rst ) begin
      HCOL_if_slc_operator_11_false_acc_9_svs_1 <= 1'b0;
    end
    else if ( run_wen & HCOL_if_3_aelse_HCOL_if_3_aelse_and_cse ) begin
      HCOL_if_slc_operator_11_false_acc_9_svs_1 <= operator_11_false_acc_itm_9_1;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (HCOL_stage_0_2 | HROW_y_or_cse) ) begin
      pix_buf0_31_24_lpi_3 <= MUX_v_8_2_2((pix0_mux_8_cse[23:16]), (pix0_31_8_lpi_3[23:16]),
          HROW_y_or_cse);
    end
  end
  assign nl_dx_chan_rsci_idat_35_27  = ({1'b1 , (pix0_31_8_lpi_3[15:8])}) + conv_u2s_8_9(~
      pix0_7_0_lpi_3_dfm_1_mx1w1) + 9'b000000001;
  assign nl_HROW_acc_nl = HROW_y_sva + 10'b0000000001;
  assign HROW_acc_nl = nl_HROW_acc_nl[9:0];
  assign HROW_y_not_1_nl = ~ (fsm_output[0]);
  assign not_nl = ~ HROW_y_or_cse;
  assign and_69_nl = (HCOL_HCOL_if_2_and_tmp | (~ HCOL_stage_0_1)) & HCOL_stage_0_2
      & (~ HCOL_if_slc_operator_11_false_acc_9_svs_1) & (fsm_output[1]);
  assign pix0_mux_nl = MUX_v_24_2_2(pix0_mux_8_cse, (pix_chan1_rsci_idat_mxwt[31:8]),
      and_69_nl);
  assign pix0_not_2_nl = ~ (fsm_output[0]);
  assign HCOL_mux_3_nl = MUX_v_8_2_2(pix_buf0_31_24_lpi_3, pix0_31_8_lpi_3_mx1_7_0,
      operator_11_false_operator_11_false_and_cse_sva_1);
  assign nl_operator_8_false_2_acc_1_itm_1  = ({1'b1 , HCOL_mux_3_nl}) + conv_u2s_8_9(~
      pix0_31_8_lpi_3_mx1_7_0) + 9'b000000001;
  assign nl_operator_8_false_8_acc_1_itm_1  = ({1'b1 , pix0_31_8_lpi_3_mx1_7_0})
      + conv_u2s_8_9(~ (pix0_31_8_lpi_3_mx2_23_8[15:8])) + 9'b000000001;
  assign pix0_mux_4_nl = MUX_v_8_2_2(pix0_7_0_lpi_3, pix0_7_0_lpi_3_dfm_1_mx1w1,
      HCOL_stage_0_2);
  assign nl_operator_8_false_5_acc_1_itm_1  = ({1'b1 , pix0_mux_4_nl}) + conv_u2s_8_9(~
      (pix0_31_8_lpi_3_mx2_23_8[7:0])) + 9'b000000001;
  assign pix0_nor_1_nl = ~((fsm_output[3]) | (fsm_output[0]));

  function automatic [7:0] MUX1HOT_v_8_3_2;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [2:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    MUX1HOT_v_8_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function automatic [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 =  {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_struct
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_struct (
  clk, rst, arst_n, pix_chan1_rsc_dat_eol, pix_chan1_rsc_dat_sof, pix_chan1_rsc_dat_pix,
      pix_chan1_rsc_vld, pix_chan1_rsc_rdy, widthIn, heightIn, pix_chan2_rsc_dat_eol,
      pix_chan2_rsc_dat_sof, pix_chan2_rsc_dat_pix, pix_chan2_rsc_vld, pix_chan2_rsc_rdy,
      dx_chan_rsc_dat, dx_chan_rsc_vld, dx_chan_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input pix_chan1_rsc_dat_eol;
  input pix_chan1_rsc_dat_sof;
  input [31:0] pix_chan1_rsc_dat_pix;
  input pix_chan1_rsc_vld;
  output pix_chan1_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output pix_chan2_rsc_dat_eol;
  output pix_chan2_rsc_dat_sof;
  output [31:0] pix_chan2_rsc_dat_pix;
  output pix_chan2_rsc_vld;
  input pix_chan2_rsc_rdy;
  output [35:0] dx_chan_rsc_dat;
  output dx_chan_rsc_vld;
  input dx_chan_rsc_rdy;


  // Interconnect Declarations
  wire [33:0] pix_chan2_rsc_dat;


  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_EdgeDetect_IP_EdgeDetect_HorDer_run_inst_pix_chan1_rsc_dat;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_run_inst_pix_chan1_rsc_dat = {pix_chan1_rsc_dat_eol
      , pix_chan1_rsc_dat_sof , pix_chan1_rsc_dat_pix};
  EdgeDetect_IP_EdgeDetect_HorDer_run EdgeDetect_IP_EdgeDetect_HorDer_run_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .pix_chan1_rsc_dat(nl_EdgeDetect_IP_EdgeDetect_HorDer_run_inst_pix_chan1_rsc_dat[33:0]),
      .pix_chan1_rsc_vld(pix_chan1_rsc_vld),
      .pix_chan1_rsc_rdy(pix_chan1_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .pix_chan2_rsc_dat(pix_chan2_rsc_dat),
      .pix_chan2_rsc_vld(pix_chan2_rsc_vld),
      .pix_chan2_rsc_rdy(pix_chan2_rsc_rdy),
      .dx_chan_rsc_dat(dx_chan_rsc_dat),
      .dx_chan_rsc_vld(dx_chan_rsc_vld),
      .dx_chan_rsc_rdy(dx_chan_rsc_rdy)
    );
  assign pix_chan2_rsc_dat_pix = pix_chan2_rsc_dat[31:0];
  assign pix_chan2_rsc_dat_sof = pix_chan2_rsc_dat[32];
  assign pix_chan2_rsc_dat_eol = pix_chan2_rsc_dat[33];
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer (
  clk, rst, arst_n, pix_chan1_rsc_dat, pix_chan1_rsc_vld, pix_chan1_rsc_rdy, widthIn,
      heightIn, pix_chan2_rsc_dat, pix_chan2_rsc_vld, pix_chan2_rsc_rdy, dx_chan_rsc_dat,
      dx_chan_rsc_vld, dx_chan_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] pix_chan1_rsc_dat;
  input pix_chan1_rsc_vld;
  output pix_chan1_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [33:0] pix_chan2_rsc_dat;
  output pix_chan2_rsc_vld;
  input pix_chan2_rsc_rdy;
  output [35:0] dx_chan_rsc_dat;
  output dx_chan_rsc_vld;
  input dx_chan_rsc_rdy;


  // Interconnect Declarations
  wire pix_chan2_rsc_dat_eol;
  wire pix_chan2_rsc_dat_sof;
  wire [31:0] pix_chan2_rsc_dat_pix;


  // Interconnect Declarations for Component Instantiations 
  wire  nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_eol;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_eol = pix_chan1_rsc_dat[33];
  wire  nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_sof;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_sof = pix_chan1_rsc_dat[32];
  wire [31:0] nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_pix;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_pix = pix_chan1_rsc_dat[31:0];
  EdgeDetect_IP_EdgeDetect_HorDer_struct EdgeDetect_IP_EdgeDetect_HorDer_struct_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .pix_chan1_rsc_dat_eol(nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_eol),
      .pix_chan1_rsc_dat_sof(nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_sof),
      .pix_chan1_rsc_dat_pix(nl_EdgeDetect_IP_EdgeDetect_HorDer_struct_inst_pix_chan1_rsc_dat_pix[31:0]),
      .pix_chan1_rsc_vld(pix_chan1_rsc_vld),
      .pix_chan1_rsc_rdy(pix_chan1_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .pix_chan2_rsc_dat_eol(pix_chan2_rsc_dat_eol),
      .pix_chan2_rsc_dat_sof(pix_chan2_rsc_dat_sof),
      .pix_chan2_rsc_dat_pix(pix_chan2_rsc_dat_pix),
      .pix_chan2_rsc_vld(pix_chan2_rsc_vld),
      .pix_chan2_rsc_rdy(pix_chan2_rsc_rdy),
      .dx_chan_rsc_dat(dx_chan_rsc_dat),
      .dx_chan_rsc_vld(dx_chan_rsc_vld),
      .dx_chan_rsc_rdy(dx_chan_rsc_rdy)
    );
  assign pix_chan2_rsc_dat = {pix_chan2_rsc_dat_eol , pix_chan2_rsc_dat_sof , pix_chan2_rsc_dat_pix};
endmodule



